<?xml version="1.0" encoding="UTF-8"?>
<project name="[[PROJECTNAME]]" default="build">
 <property name="bin-dir" location="${basedir}/bin"/>
 
 <target name="build"
   depends="prepare,composer,vendors,symfony-prep,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpcb,phpdoc,phpunit"/>

 <target name="build-parallel"
   depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

 <target name="tools-parallel" description="Run tools in parallel">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc"/>
   <antcall target="phpdox"/>
  </parallel>
 </target>

 <target name="clean" description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/code-browser"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <delete dir="${basedir}/build/phpdox"/>
  <delete dir="${basedir}/log"/>
  <delete dir="${basedir}/cache"/>
  <delete dir="${basedir}/web/uploads"/>
 </target>

 <target name="prepare" depends="clean" description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/code-browser"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <mkdir dir="${basedir}/build/phpdox"/>
  <mkdir dir="${basedir}/log"/>
  <mkdir dir="${basedir}/cache"/>
  <mkdir dir="${basedir}/web/uploads"/>
  <exec executable="git">
    <arg value="submodule"/>
    <arg value="update"/>
    <arg value="--init"/>
    <arg value="--recursive"/>
  </exec>
 </target>

 <target name="symfony-prep" depends="vendors" description="Do the symfony setup">
  <exec executable="php">
    <arg value="${basedir}/symfony"/>
    <arg value="propel:build"/>
    <arg value="--all-classes"/>
  </exec>
  <exec executable="php">
    <arg value="${basedir}/symfony"/>
    <arg value="project:permissions"/>
  </exec>
  <exec executable="php">
    <arg value="${basedir}/symfony"/>
    <arg value="cache:clear"/>
  </exec>
 </target>

 <target name="lint" description="Perform syntax check of sourcecode files">
  <apply executable="php" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}">
    <include name="**/*.php" />
    <exclude name="**/vendor/**"/>
    <modified />
   </fileset>

   <fileset dir="${basedir}/test">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="${bin-dir}/phploc">
   <arg value="--log-csv" />
   <arg value="${basedir}/build/logs/phploc.csv" />
   <arg value="--exclude" />
   <arg value="vendor" />
   <arg value="--exclude" />
   <arg value="model/om" />
   <arg value="--exclude" />
   <arg value="model/map" />
   <arg value="--exclude" />
   <arg value="model/migration" />
   <arg path="${basedir}/lib" />
  </exec>
 </target>

 <target name="pdepend" description="Calculate software metrics using PHP_Depend">
  <exec executable="${bin-dir}/pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg value="--ignore=vendor,model/om,model/map,model/migration" />
   <arg path="${basedir}/lib" />
  </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${bin-dir}/phpmd">
   <arg path="${basedir}/lib" />
   <arg value="text" />
   <arg value="${basedir}/vendor/evolution7/qa-tools/rulesets/phpmd/legacy.xml" />
   <arg value="--exclude" />
   <arg value="vendor,model/om,model/map,filter/base,form/base,model/migration" />
  </exec>
 </target>

 <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
  <exec executable="${bin-dir}/phpmd">
   <arg path="${basedir}/lib" />
   <arg value="xml" />
   <arg value="${basedir}/vendor/evolution7/qa-tools/rulesets/phpmd/legacy.xml" />
   <arg value="--reportfile" />
   <arg value="${basedir}/build/logs/pmd.xml" />
   <arg value="--exclude" />
   <arg value="vendor,model/om,model/map,filter/base,form/base,model/migration" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${bin-dir}/phpcs">
   <arg value="--standard=${basedir}/vendor/evolution7/qa-tools/rulesets/phpcs/legacy.xml" />
   <arg value="--ignore=vendor/*,model/om/*,model/map/*" />
   <arg path="${basedir}/lib" />
  </exec>
 </target>

 <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
  <exec executable="${bin-dir}/phpcs" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=${basedir}/vendor/evolution7/qa-tools/rulesets/phpcs/legacy.xml" />
   <arg value="--ignore=vendor/*,model/om/*,model/map/*" />
   <arg path="${basedir}/lib" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="${bin-dir}/phpcpd">
   <arg value="--log-pmd" />
   <arg value="${basedir}/build/logs/pmd-cpd.xml" />
   <arg value="--exclude" />
   <arg value="vendor" />
   <arg value="--exclude" />
   <arg value="symfony" />
   <arg value="--exclude" />
   <arg value="model/om" />
   <arg value="--exclude" />
   <arg value="model/migration" />
   <arg value="--exclude" />
   <arg value="model/map" />
   <arg value="--exclude" />
   <arg value="filter/base" />
   <arg value="--exclude" />
   <arg value="form/base" />
   <arg path="${basedir}/lib" />
  </exec>
 </target>

 <target name="phpdox" description="Generate API documentation using phpDox">
  <exec executable="phpdox"/>
 </target>

 <target name="phpdoc" description="Generate API documentation using phpDocumentor">
  <exec executable="${bin-dir}/phpdoc">
    <arg value="--directory=${basedir}" />
    <arg value="--title='${ant.project.name}'" />
    <arg value="--target=${basedir}/build/api" />
    <arg value="--ignore=vendor/*,plugins/*,lib/vendor/*,lib/model/om/*,lib/model/migration/*,lib/model/base/*,lib/model/map/*,lib/filter/base/*,lib/form/base/*,test/*"/>
  </exec>
 </target>

 <target name="phpunit" description="Run unit tests with PHPUnit">
  <exec executable="${bin-dir}/phpunit" failonerror="true">
    <arg value="-d"/>
    <arg value="zend.enable_gc=0" />
  </exec>
 </target>

 <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
  <exec executable="${bin-dir}/phpcb">
   <arg value="--log" />
   <arg path="${basedir}/build/logs" />
   <arg value="--source" />
   <arg path="${basedir}/lib" />
   <arg value="--output" />
   <arg path="${basedir}/build/code-browser" />
  </exec>
 </target>

 <target name="composer" description="Install composer.phar">
      <exec executable="bash">
          <arg value="-c"/>
          <arg value="curl -s http://getcomposer.org/installer | php"/>
      </exec>
  </target>
  <target name="vendors" description="Install vendors">
      <exec executable="${basedir}/composer.phar" failonerror="true">
          <arg value="install" />
      </exec>
  </target>
</project>